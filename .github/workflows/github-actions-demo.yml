#
# Copyright (c) 2006-2023, RT-Thread Development Team
#
# SPDX-License-Identifier: Apache-2.0
#
# Change Logs:
# Date           Author       Notes
# 2023-07-01     Supperthomas the first version
#

# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master",
                "feature",
                "workflow"
                ]
  pull_request:
    branches: [ "master" ,
                "feature"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.8

    - name: Install Tools
      shell: bash
      run: |
        sudo apt-get update
        wget https://raw.githubusercontent.com/RT-Thread/env/master/install_ubuntu.sh
        chmod 777 install_ubuntu.sh
        ./install_ubuntu.sh
        git config --global http.postBuffer 524288000
        python -c "import tools.menuconfig; tools.menuconfig.touch_env()"
        echo "RTT_ROOT=${{ github.workspace }}" >> $GITHUB_ENV
        echo "RTT_CC=gcc" >> $GITHUB_ENV

    - name: Install Arm ToolChains
      if: ${{ success() }}
      shell: bash
      run: |
        wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.3/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
        sudo tar xjf gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2 -C /opt
        /opt/gcc-arm-none-eabi-10-2020-q4-major/bin/arm-none-eabi-gcc --version
        echo "RTT_EXEC_PATH=/opt/gcc-arm-none-eabi-10-2020-q4-major/bin" >> $GITHUB_ENV

    - name: Bsp Scons Compile
      if: ${{ success() }}
      shell: bash
      env:
        RTT_BSP: ${{ github.event.inputs.bsp_options }}
        RTT_TOOL_CHAIN: ${{ github.event.inputs.bsp_tool_chain}}
      run: |
        source ~/.env/env.sh
        echo cwd
        ls Kconfig && scons -C --pyconfig-silent
        config=${{ github.event.inputs.bsp_config}}
        preconfig=${config%%=*}
        echo "$preconfig"
        sed -i "/$preconfig/ s/.*/$config/" .config
        scons -C ./ --pyconfig-silent
        pushd ./ && pkgs --update && popd
        config=${{ github.event.inputs.bsp_config1}}
        preconfig=${config%%=*}
        echo "$preconfig" 
        sed -i "/$preconfig/ s/.*/$config/" .config
        scons -C ./ --pyconfig-silent
        pushd ./ && pkgs --update && popd
        config=${{ github.event.inputs.bsp_config1}}
        preconfig=${config%%=*}
        echo "$preconfig"  
        sed -i "/$preconfig/ s/.*/$config/" .config
        scons -C ./ --pyconfig-silent
        pushd ./ && pkgs --update && popd
        config=${{ github.event.inputs.bsp_config1}}
        preconfig=${config%%=*}
        echo "$preconfig" 
        sed -i "/$preconfig/ s/.*/$config/" .config
        scons -C ./ --pyconfig-silent
        pushd ./ && pkgs --update && popd
        cat ./.config
        scons --target=cmake
        pwd

    - uses: actions/checkout@v3
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
